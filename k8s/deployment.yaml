apiVersion: apps/v1
kind: Deployment
metadata:
  name: "goserver"
  labels:
    app: "goserver"
spec:
  selector:
    matchLabels:
      app: goserver
  replicas: 1
  template:
    metadata:
      labels:
        app: "goserver"
    spec:
      containers:
        - name: goserver
          image: "carrilh0/hello-go:v6.4"

          resources:
            requests: # Minimo -> Sequestrado (RESERVADO) -> POD
              cpu: "0.1"
              memory: 20Mi
            limits: # Máximo por POD 
              cpu: "0.1"
              memory: 25Mi

          startupProbe:
            httpGet:
              path: /healthz
              port: 8000
            periodSeconds: 5 # a cada 5 segundos
            failureThreshold: 30 # limite de problemas para reiniciar 
            # a cada 5 segundos 30 vezes
            # 150 segundos, 2 minutos e meio verificando o startup
            
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8000
            periodSeconds: 5 # a cada 5 segundos
            failureThreshold: 1 # limite de problemas para reiniciar
            # initialDelaySeconds: 10 # Começa a verificar após 10 segundos

          livenessProbe:
            httpGet:
              path: /healthz
              port: 8000
            periodSeconds: 5 # a cada 5 segundos
            failureThreshold: 2 # limite de problemas para reiniciar
            timeoutSeconds: 2 # tempo limite esperando a requisição
            successThreshold: 1 # quantas vezes tem que testar para garantir que está ok

          envFrom:
            - configMapRef:  
                name: goserver-env
            - secretRef:
                name: goserver-secret

          volumeMounts:
            - mountPath: "/go/myfamily"
              name: config
            - mountPath: "/go/pvc"
              name: goserver-volume
    
      volumes:
        - name: goserver-volume
          persistentVolumeClaim:
            claimName: goserver-pvc

        - name: config
          configMap:
            name: configmap-family
            items:
            - key: members
              path: "family.txt"
          
          # env:
          #   - name: NAME
          #     valueFrom: 
          #       configMapKeyRef:
          #         name: goserver-env
          #         key: NAME
          #   - name: AGE
          #     valueFrom:
          #       configMapKeyRef:
          #         name: goserver-env
          #         key: AGE

          # kubectl apply -f k8s/deployment.yaml
          # kubectl replace -f k8s/deployment.yaml --force --save-config